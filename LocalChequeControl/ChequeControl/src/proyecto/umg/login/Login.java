package proyecto.umg.login;

import java.math.BigDecimal;

import model.ChkUsuario;
import proyecto.umg.base.ViewBase;
import proyecto.umg.componentes.TextFieldU;
import proyecto.umg.dao.ProjectDao;
import proyecto.umg.utils.Utils;
import proyecto.umg.vistas.Menu;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.annotations.Theme;
import com.vaadin.navigator.Navigator;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.Page;
import com.vaadin.server.ThemeResource;
import com.vaadin.server.VaadinSession;
import com.vaadin.shared.Position;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.VerticalLayout;
/**
 * 
 * @author Ronald Orantes
 *
 */
@Theme("chequecontrol")
public class Login extends CustomComponent implements View, ClickListener {

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	private VerticalLayout layout;
	TextFieldU txtUsuario = new TextFieldU("usuario", 10, 1, "", true, true);
	private static final String STOP_ICON = "stop.jpg";
	PasswordField txtPass = new PasswordField();

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public Login() {
		
		buildMainLayout();	
		setSizeFull();
		setCompositionRoot(layout);
		setStyleName("desktop");
	}
	
	
	
	@AutoGenerated
	private void buildMainLayout() {
		
		mainLayout = new AbsoluteLayout();
		layout = new VerticalLayout();
		layout.setWidth("100%");
		layout.setHeight("100%");
		layout.setMargin(true);
		FormLayout form = new FormLayout();
		
		//
		Label lblUser = new Label("Usuario");
		lblUser.setStyleName("textolabel");		
		Label lblPass = new Label("Contraseña");
		lblPass.setStyleName("textolabel");
		form.setWidth("400px");
		form.setHeight("400px");
//		form.setWidth(60, Unit.PERCENTAGE);
//		form.setHeight(30, Unit.PERCENTAGE);
		form.addComponent(lblUser);		
		form.addComponent(txtUsuario);
		form.addComponent(lblPass);
		form.addComponent(txtPass);
		txtPass.setValidationVisible(true);
		txtPass.setRequired(true);
//		form.addComponent(select);
		Button boton = new Button("Iniciar Sesion");
		boton.addClickListener(this);
		form.addComponent(boton);
		layout.addComponent(form);		
		layout.setComponentAlignment(form, Alignment.MIDDLE_CENTER);
		
		
	}
	private void notif(String title, String message, Type type, String imageName) {

		final Notification notif = new Notification(title, message,
				type);
		notif.setDelayMsec(ViewBase.TIEMPO_DELAY_NOTIFICACIONES);
		notif.setPosition(Position.TOP_LEFT);
		notif.setStyleName("mystyle");
		notif.setIcon(new ThemeResource("images/notificaciones/"+imageName));
		notif.show(Page.getCurrent());
		Button a = new Button();
		a.setStyleName("boton");

	}

	@Override
	public void enter(ViewChangeEvent event) {
		// TODO Auto-generated method stub
		
	}



	@Override
	public void buttonClick(ClickEvent event) {
		boolean inicio =false;
		ChkUsuario user = null; 
		try{
			
			Button btn = (Button) event.getComponent();
			if (btn.getCaption().equals("Iniciar Sesion")){			
			
				ProjectDao<ChkUsuario> dao = null;
				try{
					dao = new ProjectDao<>(new ChkUsuario());
					
					try {
						
						user = dao.findElementById(txtUsuario.getValue());
						
					} catch (Exception e) {
						e.printStackTrace();
						notif ("Error", "Ocurrio un error al loguearse, intente mas tarde",Notification.Type.WARNING_MESSAGE,STOP_ICON);
						return;
					}
					if ( user == null){
						notif ("Error", "No existe el usuario ingresado",Notification.Type.WARNING_MESSAGE,STOP_ICON);
						return;
					}
					if (user.getUsername()== null){
						notif ("Error", "No existe el usuario ingresado",Notification.Type.WARNING_MESSAGE,STOP_ICON);
						return;
					}
					if (user.getStatus().intValue() == 0){
						notif ("Error", "No existe el usuario ingresado",Notification.Type.WARNING_MESSAGE,STOP_ICON);
						return;
					}
					if (user.getIntentosFallidos().intValue() >= 3){
						notif("Error", "Su usuario se encuentra bloqueado por tener 3 intentos fallidos, por favor contacte a sistemas",Type.WARNING_MESSAGE,STOP_ICON);
						return;
						
					}
					String pass = Utils.convertSha2(txtPass.getValue());
					System.out.println(pass);
					
					if (user.getPassword().equals(pass)){
						user.setIntentosFallidos(new BigDecimal(0));
						
						reiniciaValoresUsuario(dao);
						inicio = true;					
						try{
							VaadinSession.getCurrent().getLockInstance().lock();
							
							System.out.println("Aqui meto el usuario a sesion "+user);
						    VaadinSession.getCurrent().setAttribute("USUARIO", user);
						}finally{
							VaadinSession.getCurrent().getLockInstance().unlock();
						}
						
						Navigator nav = (Navigator) VaadinSession.getCurrent().getAttribute("NAVEGADOR");					
						nav.navigateTo("MENU");					
						
						notif ("Notificacion", "Bienvenido al sistema "+user.getUsername(),Notification.Type.WARNING_MESSAGE,"ok.png");
						
					}else{
						
						user.setIntentosFallidos(user.getIntentosFallidos().add(new BigDecimal(1)));
						System.out.println("Intentos fallidos  "+user.getIntentosFallidos());
						reiniciaValoresUsuario(dao);
						notif("Error", "Contraseña incorrecta. "+(user.getIntentosFallidos().intValue() == 3 ? "Su usuario ha sido bloqueado" : ""), Notification.Type.HUMANIZED_MESSAGE, "vostumadre.png");
					}
				}finally{
					if (dao != null){
						System.out.println("Se cierra entity manager");
						dao.closeEntityManager();
					}
					
				}
				
				
			}
		}finally{
			
			limpiarElementos();			
		}
		
	}
	
	private void reiniciaValoresUsuario(ProjectDao<ChkUsuario> dao) {
		try {
			System.out.println("Usuario en el dao   "+dao.getEntity().getIntentosFallidos());
			dao.merge();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	private void limpiarElementos() {
		txtPass.setValue("");
		txtUsuario.setValue("");
		
	}

}
