package proyecto.umg.vistas;

import java.util.HashMap;
import java.util.Map;
import model.ChkRolesPorUsuario;
import model.ChkUsuario;
import proyecto.umg.admin.UsuarioList;
import proyecto.umg.base.ViewBase;
import proyecto.umg.crud.BancoList;
import proyecto.umg.crud.ChequeraList;
import proyecto.umg.crud.CuentaList;
import proyecto.umg.crud.ProveedorList;
import proyecto.umg.transaction.AccesosRpt;
import proyecto.umg.transaction.ChequeList;
import proyecto.umg.transaction.ChequesRpt;
import proyecto.umg.transaction.ConfigurarMontosUsuariosPagos;
import proyecto.umg.transaction.DepositosCuenta;
import proyecto.umg.transaction.GenerarChequeForm;
import proyecto.umg.transaction.MovimientosCuentaRpt;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.FontAwesome;
import com.vaadin.server.Page;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Layout;
import com.vaadin.ui.MenuBar;
import com.vaadin.ui.MenuBar.Command;
import com.vaadin.ui.MenuBar.MenuItem;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.VerticalLayout;

public class Menu extends ViewBase implements View, Command {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@Override
	public void enter(ViewChangeEvent event) {
		if (verificaSesion()){
			construirMenuPorRoles();
		}
		

	}
	
	private VerticalLayout layout;
	private GridLayout layoutPrincipal;
	private TabSheet tabs;
	private MenuBar barmenu;
	private Label selection;
	
	
	
	public Menu(){
		System.out.println("Aqui estoy ya en la sesion ");		
		selection = new Label("-");
		selection.setStyleName("textolabel");
		buildMainLayout();
		setSizeFull();
		setCompositionRoot(layoutPrincipal);
		setStyleName("desktop-app");
	}
	
	@AutoGenerated
	private void buildMainLayout() {
		layout = new VerticalLayout();
		layoutPrincipal = new GridLayout(1,3);
		layoutPrincipal.setSizeFull();
		layoutPrincipal.setRowExpandRatio(1, 1);
		layout.addComponent(new Label("CONTENIDO"));
		layout.setStyleName("content-style");
		
		
		//layout.setMargin(true);				
	}
	
	private void construirMenuPorRoles(){
		 // Put some items in the menu hierarchically
		ChkUsuario user = (ChkUsuario) obtieneVariableSesion("USUARIO");
		Map<String, String> permisos = (Map<String, String>) obtieneVariableSesion("PERMISOS");
		if (permisos == null){
			permisos = new HashMap<String, String>();
			
			if (user != null){
				for (ChkRolesPorUsuario rolact: user.getChkRolesPorUsuarios()){
					String r = rolact.getChkRol().getRol();
					if (rolact.getEstado().intValue() == 1){
						permisos.put(r, "S");
					}
										
				}
			}
		}
		colocaObjetoSesion("PERMISOS", permisos);
		if (barmenu == null){
			barmenu = new MenuBar();
			
			
		}
		layoutPrincipal.addComponent(layout,0,1);
		layoutPrincipal.setComponentAlignment(layout, Alignment.MIDDLE_CENTER);
		layout.setWidth("100%");
		layout.setHeight("100%");
		Layout header = new HorizontalLayout(barmenu);
		header.setStyleName("barmenu");
		header.setWidth("100%");
		barmenu.removeItems();
		
		
		layoutPrincipal.addComponent(header,0,0);
		
		
		Label lblFoot = new Label("Usuario Ingresado:  "+user.getUsername());
		
		lblFoot.setStyleName("textolabel");
		
		Layout footer = new HorizontalLayout(lblFoot);
		footer.setWidth("100%");
		footer.setStyleName("barmenu");
		layoutPrincipal.addComponent(footer);

		//layout.addComponent(barmenu);
		barmenu.addItem("Home", getResource(BASE_R20+"inicio.png"),this);
		
		if (permisos.get("CONTABILIDAD")!= null ){
			MenuBar.MenuItem conta1 = barmenu.addItem("Catalogos", getResource(BASE_R20+"catalogos.png"),null);
			conta1.addItem("Bancos", getResource(BASE_R20+"banco.png"),this);
			conta1.addItem("Proveedores", getResource(BASE_R20+"proveedor.png"),this);
			conta1.addItem("Chequeras", getResource(BASE_R20+"chequera.png"),this);
			conta1.addItem("Cuentas Bancarias", getResource(BASE_R20+"cuenta_bancaria.png"),this);
			MenuBar.MenuItem conta2 = barmenu.addItem("Cuentas Bancarias", getResource(BASE_R20+"cuentas.png"),null);
			conta2.addItem("Registrar Depositos a Cuenta", getResource(BASE_R20+"depositos.png"), this);
						
		}
		
		if (permisos.get("PAGOS")!= null | permisos.get("AUDITORIA") != null | permisos.get("GERENCIA") != null 
				| permisos.get("JEFE_PAGOS")!= null | permisos.get("CONSEJO")!= null){
			MenuBar.MenuItem pagos = barmenu.addItem("Pagos", getResource(BASE_R20+"pagos_20.png"),null);
//			if (permisos.get("JEFE_PAGOS")!= null){
//				pagos.addItem("Modificar Cheques", getResource(BASE_R20+"cheque1.png"),this);
//				
//			}
			if (permisos.get("PAGOS")!= null || permisos.get("JEFE_PAGOS")!= null){
				pagos.addItem("Generacion de Cheques", getResource(BASE_R20+"cheque2.png"),this);
				
			}
			System.out.println("CONSEJO  "+permisos.get("CONSEJO"));
			
			if (permisos.get("AUDITORIA") != null | permisos.get("GERENCIA") != null | permisos.get("CONSEJO") != null){
				pagos.addItem("Liberacion de Cheques", FontAwesome.ARCHIVE, this);
			}
//			if (permisos.get("CONSEJO") != null){
//				pagos.addItem("Configuracion", FontAwesome.ARCHIVE, this);
//			}
			
		}
		if (permisos.get("JEFE_PAGOS")!= null){
			MenuBar.MenuItem configuracion = barmenu.addItem("Configuraciones", getResource(BASE_R20+"administrador.png"),null);
			configuracion.addItem("Montos para generación de cheques por Usuario", getResource(BASE_R20+"usuario.png"),this);
		}
		
		if (permisos.get("ADMINISTRADOR") != null | permisos.get("CONSEJO") != null){			
			MenuBar.MenuItem administracion = barmenu.addItem("Administracion", getResource(BASE_R20+"configuracion_menu.png"),null);
			MenuBar.MenuItem adminCat = administracion.addItem("Gestion de Usuarios y Roles", getResource(BASE_R20+"usuariooo.png"), null);
			adminCat.addItem("Catalogo de Usuarios", getResource(BASE_R20+"usuario.png"), this);
//			adminCat.addItem("Roles", FontAwesome.USERS, this);
//			adminCat.addItem("Asignacion de Roles", FontAwesome.USER_MD,this);		
			if (permisos.get("CONSEJO") != null){
				adminCat.addItem("Configuracion", getResource(BASE_R20+"configuracion.png"), this);
			}
			
		}
		if (permisos.get("CAJERO")!= null){
			MenuBar.MenuItem configuracion = barmenu.addItem("Cheques", getResource(BASE_R20+"cheque1.png"),null);
			configuracion.addItem("Impresion de Cheques", getResource(BASE_R20+"cheque2.png"),this);
		}
		if (permisos.get("CONTABILIDAD")!= null | permisos.get("CONSEJO") != null | permisos.get("JEFE_PAGOS") != null
				| permisos.get("GERENCIA") != null | permisos.get("CAJERO") != null | permisos.get("ADMINISTRADOR") != null){
			
			MenuBar.MenuItem conta2 = barmenu.addItem("Reportes", getResource(BASE_R20+"reporte.png"),null);
			if (permisos.get("CONTABILIDAD")!= null | permisos.get("CONSEJO") != null 
					| permisos.get("GERENCIA") != null){
				
				conta2.addItem("Reporte de Movimientos de Cuenta", getResource(BASE_R20+"reporte.png"), this);
				
			}
			if (permisos.get("CONTABILIDAD")!= null | permisos.get("CONSEJO") != null 
					| permisos.get("GERENCIA") != null | permisos.get("JEFE_PAGOS") != null | permisos.get("CAJERO") != null){
				
				conta2.addItem("Reporte de Cheques Emitidos", getResource(BASE_R20+"reporte.png"),this);
				
			}
			
			if (permisos.get("ADMINISTRADOR")!= null){
				
				conta2.addItem("Reporte de Accesos Al Sistema", getResource(BASE_R20+"chequera.png"),this);
				
			}
			
			
			
		}
		
		barmenu.addItem("Salir", getResource(BASE_R20+"salir.png"),this);
	}

	@Override
	public void menuSelected(MenuItem selectedItem) {
		System.out.println("Item seleccionado  "+selectedItem.getText());
		String seleccion = selectedItem.getText();
		if (seleccion.equals("Home")){
			addComponentCenter(new CustomComponent());			
		}
		if (seleccion.equals("Salir")){
			cerrarSesion(Page.getCurrent());
		}	
		if (seleccion.equals("Catalogo de Usuarios")){
			addComponentCenter(new UsuarioList());
		}
		if (seleccion.equals("Bancos")){
			addComponentCenter(new BancoList());
		}
		if (seleccion.equals("Cuentas Bancarias")){
			addComponentCenter(new CuentaList());
		}
		if (seleccion.equals("Chequeras")){
			addComponentCenter(new ChequeraList());
		}
		if (seleccion.equals("Proveedores")){
			addComponentCenter(new ProveedorList());
		}
		if (seleccion.equals("Montos para generación de cheques por Usuario")){
			addComponentCenter(new ConfigurarMontosUsuariosPagos());
		}
		if (seleccion.equals("Generacion de Cheques")){
			addComponentCenter(new GenerarChequeForm());
		}
		if (seleccion.equals("Registrar Depositos a Cuenta")){
			addComponentCenter(new DepositosCuenta());
		}
		if (seleccion.equals("Liberacion de Cheques")){
			addComponentCenter(new ChequeList(0));
		}
		if (seleccion.equals("Impresion de Cheques")){
			addComponentCenter(new ChequeList(4));
		}
		if (seleccion.equals("Reporte de Movimientos de Cuenta")){
			addComponentCenter(new MovimientosCuentaRpt());
		}
		if (seleccion.equals("Reporte de Cheques Emitidos")){
			addComponentCenter(new ChequesRpt());
		}
		if (seleccion.equals("Reporte de Accesos Al Sistema")){
			addComponentCenter(new AccesosRpt());
		}
		
		
	}
	
	private void addComponentCenter(CustomComponent comp){
		layoutPrincipal.removeAllComponents();
		construirMenuPorRoles();
		layoutPrincipal.removeComponent(layout);
		layoutPrincipal.addComponent(comp,0,1);
		
		layoutPrincipal.setComponentAlignment(comp, Alignment.TOP_CENTER);
	}
	

}
